{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPJgNDh+zWo+9+YWa8dTqmt",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/b-richins92/Cancer_Prediction/blob/main/Model_Evaluation_Using_RFE_and_PyCaret_.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "b7mtL_NXMgW_"
      },
      "outputs": [],
      "source": [
        "\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import altair as alt\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "import statsmodels.api as sm\n",
        "from sklearn.feature_selection import RFE\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.experimental import enable_iterative_imputer\n",
        "from sklearn.impute import IterativeImputer\n",
        "from imblearn.over_sampling import SMOTE\n",
        "from sklearn.metrics import recall_score, precision_score, accuracy_score, f1_score\n",
        "from sklearn.naive_bayes import GaussianNB"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Read three CSV files: train_df.csv, test_df.csv, and val_df.csv. Each file is loaded into a separate DataFrame (train_df, test_df, and val_df), which will be used for training, testing, and validation purposes in a machine learning pipeline."
      ],
      "metadata": {
        "id": "ThWHMYxcpwAo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Read the training dataset from 'train_df.csv' into a DataFrame\n",
        "train_df = pd.read_csv('train_df.csv')\n",
        "\n",
        "# Read the test dataset from 'test_df.csv' into a DataFrame\n",
        "test_df = pd.read_csv('test_df.csv')\n",
        "\n",
        "# Read the validation dataset from 'val_df.csv' into a DataFrame\n",
        "val_df = pd.read_csv('val_df.csv')"
      ],
      "metadata": {
        "id": "wPyeJwksNIci"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "This code defines a list of important columns for Recursive Feature Elimination (RFE) and selects these columns from the training, testing, and validation DataFrames. It then splits each DataFrame into features (X) and target (y), where the target is the 'Cancer' column."
      ],
      "metadata": {
        "id": "B6M3BdtTr41d"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the important columns for RFE\n",
        "RFE_important_column = [\n",
        "    'Age Group', 'Num of Bad Mental Health Days', 'Hours of Sleeping',\n",
        "    'Age Started Smoking', 'Cigarettes per Day', 'Days Drinking',\n",
        "    'Tetanus Last 10 Years', 'Metropolitan', 'BMI','Education_attended_college', 'Cancer'\n",
        "    ]\n",
        "# Select the important columns for RFE from the training, testing, and validation DataFrames\n",
        "train_RFE_df = train_df[RFE_important_column]\n",
        "test_RFE_df =  test_df[RFE_important_column]\n",
        "val_RFE_df = val_df[RFE_important_column]"
      ],
      "metadata": {
        "id": "wAdKn86eoNXj"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop NA if there is any\n",
        "train_RFE_df = train_RFE_df.dropna()\n",
        "test_RFE_df = test_RFE_df.dropna()\n",
        "val_RFE_df = val_RFE_df.dropna()"
      ],
      "metadata": {
        "id": "pT_vHJZiPekl"
      },
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the training DataFrame into features (X) and target (y)\n",
        "X_train_RFE = train_RFE_df.drop('Cancer', axis=1)\n",
        "y_train_RFE = train_RFE_df['Cancer']"
      ],
      "metadata": {
        "id": "FPIjJ1Q4qx6A"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the testing DataFrame into features (X) and target (y)\n",
        "X_test_RFE = test_RFE_df.drop('Cancer', axis=1)\n",
        "y_test_RFE = test_RFE_df['Cancer']"
      ],
      "metadata": {
        "id": "fFGZbyBvrOwe"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the validation DataFrame into features (X) and target (y)\n",
        "X_val_RFE = val_RFE_df.drop('Cancer', axis=1)\n",
        "y_val_RFE = val_RFE_df['Cancer']"
      ],
      "metadata": {
        "id": "k-0zbvfgrcfn"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Define the important columns for pycaret\n",
        "pycaret_important_column = ['Age Group', 'Pneumonia Vaccine', 'Arthritis', 'Flu Vaccine', 'Ethnicity_White', 'BMI', 'Had COVID', 'Married', 'Gender', 'Tetanus Last 10 Years', 'Cancer']\n",
        "train_pycaret_df = train_df[pycaret_important_column]\n",
        "test_pycaret_df =  test_df[pycaret_important_column]\n",
        "val_pycaret_df = val_df[pycaret_important_column]"
      ],
      "metadata": {
        "id": "rVfbhlVvqDso"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Drop NA if there is any\n",
        "train_pycaret_df = train_pycaret_df.dropna()\n",
        "test_pycaret_df = test_pycaret_df.dropna()\n",
        "val_pycaret_df = val_pycaret_df.dropna()"
      ],
      "metadata": {
        "id": "T6UL4c0KqjPV"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the training DataFrame into features (X) and target (y)\n",
        "X_train_pycaret = train_pycaret_df.drop('Cancer', axis=1)\n",
        "y_train_pycaret = train_pycaret_df['Cancer']"
      ],
      "metadata": {
        "id": "RCpeEJQCsi1o"
      },
      "execution_count": 13,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the testing DataFrame into features (X) and target (y)\n",
        "X_test_pycaret = test_pycaret_df.drop('Cancer', axis=1)\n",
        "y_test_pycaret = test_pycaret_df['Cancer']"
      ],
      "metadata": {
        "id": "_ZU0oAlysjoP"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Split the validation DataFrame into features (X) and target (y)\n",
        "X_val_pycaret = val_pycaret_df.drop('Cancer', axis=1)\n",
        "y_val_pycaret = val_pycaret_df['Cancer']"
      ],
      "metadata": {
        "id": "iHoKK_Qvs3ye"
      },
      "execution_count": 15,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "y = y_train_RFE[y_train_RFE == 0]\n",
        "len(y)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UO4mrX_GtJMI",
        "outputId": "99ac7d3e-8490-4725-8656-fc74a5ff1239"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "117111"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Define the different SMOTE ratios to test\n",
        "ratios = [0.20, 0.25, 0.30, 0.35, 0.40, 0.45, 0.50]\n",
        "\n",
        "# List to store recall scores\n",
        "recall_scores = []\n",
        "\n",
        "# Lists to store recall scores\n",
        "train_recall_scores = []\n",
        "test_recall_scores = []\n",
        "\n",
        "# Initial recall without SMOTE\n",
        "clf = RandomForestClassifier(random_state=42)\n",
        "clf.fit(X_train_RFE, y_train_RFE)\n",
        "y_train_pred = clf.predict(X_train_RFE)\n",
        "y_test_pred = clf.predict(X_test_RFE)\n",
        "train_recall = recall_score(y_train_RFE, y_train_pred)\n",
        "test_recall = recall_score(y_test_RFE, y_test_pred)\n",
        "train_recall_scores.append(train_recall)\n",
        "test_recall_scores.append(test_recall)\n",
        "print(f\"Without SMOTE, Train Recall: {train_recall}, Test Recall: {test_recall}\")\n",
        "\n",
        "# Loop through each ratio\n",
        "for ratio in ratios:\n",
        "    # Apply SMOTE\n",
        "    smote = SMOTE(sampling_strategy=ratio, random_state=42)\n",
        "    X_res, y_res = smote.fit_resample(X_train_RFE, y_train_RFE)\n",
        "\n",
        "    # Train a classifier\n",
        "    clf = RandomForestClassifier(random_state=42)\n",
        "    clf.fit(X_res, y_res)\n",
        "\n",
        "    # Predict on the training set\n",
        "    y_train_pred = clf.predict(X_res)\n",
        "    train_recall = recall_score(y_res, y_train_pred)\n",
        "    train_recall_scores.append(train_recall)\n",
        "\n",
        "    # Predict on the test set\n",
        "    y_test_pred = clf.predict(X_test_RFE)\n",
        "    test_recall = recall_score(y_test_RFE, y_test_pred)\n",
        "    test_recall_scores.append(test_recall)\n",
        "\n",
        "    print(f\"Ratio: {ratio}, Train Recall: {train_recall}, Test Recall: {test_recall}\")\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "EPe3sPSHPiN9",
        "outputId": "2d100b7b-b61b-487a-fb91-534345499cf7"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Without SMOTE, Train Recall: 0.9839300244100895, Test Recall: 0.03242490551024468\n",
            "Ratio: 0.2, Train Recall: 0.9910767654342072, Test Recall: 0.5313308136065248\n",
            "Ratio: 0.25, Train Recall: 0.9932370119889333, Test Recall: 0.7057887407996817\n",
            "Ratio: 0.3, Train Recall: 0.9944781259784249, Test Recall: 0.7945096479013328\n",
            "Ratio: 0.35, Train Recall: 0.9953157021567288, Test Recall: 0.8169882633777601\n",
            "Ratio: 0.4, Train Recall: 0.9962215011527623, Test Recall: 0.8679132683509051\n",
            "Ratio: 0.45, Train Recall: 0.9967741323364769, Test Recall: 0.8868112194151582\n",
            "Ratio: 0.5, Train Recall: 0.9970113568439928, Test Recall: 0.8947682514422121\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the recall scores\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot([0] + ratios, train_recall_scores, marker='o', label='Train Recall')\n",
        "plt.plot([0] + ratios, test_recall_scores, marker='o', label='Test Recall')\n",
        "plt.title('Recall Scores for Different SMOTE Ratios')\n",
        "plt.xlabel('SMOTE Ratio')\n",
        "plt.ylabel('Recall Score')\n",
        "plt.xticks([0] + ratios, ['No SMOTE'] + [f'{int(r*100)}:{100-int(r*100)}' for r in ratios])\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "1LniRC_cylcj",
        "outputId": "34a71d52-74ef-4bc8-d518-d971f1d08144"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Lists to store recall scores\n",
        "train_recall_scores = []\n",
        "test_recall_scores = []\n",
        "\n",
        "# Initial recall without SMOTE\n",
        "clf = GaussianNB()\n",
        "clf.fit(X_train_RFE, y_train_RFE)\n",
        "y_train_pred = clf.predict(X_train_RFE)\n",
        "y_test_pred = clf.predict(X_test_RFE)\n",
        "train_recall = recall_score(y_train_RFE, y_train_pred)\n",
        "test_recall = recall_score(y_test_RFE, y_test_pred)\n",
        "train_recall_scores.append(train_recall)\n",
        "test_recall_scores.append(test_recall)\n",
        "print(f\"Without SMOTE, Train Recall: {train_recall}, Test Recall: {test_recall}\")\n",
        "\n",
        "# Loop through each ratio\n",
        "for ratio in ratios:\n",
        "    # Apply SMOTE\n",
        "    smote = SMOTE(sampling_strategy=ratio, random_state=42)\n",
        "    X_res, y_res = smote.fit_resample(X_train_RFE, y_train_RFE)\n",
        "\n",
        "    # Train a classifier\n",
        "    clf = GaussianNB()\n",
        "    clf.fit(X_res, y_res)\n",
        "\n",
        "    # Predict on the training set\n",
        "    y_train_pred = clf.predict(X_res)\n",
        "    train_recall = recall_score(y_res, y_train_pred)\n",
        "    train_recall_scores.append(train_recall)\n",
        "\n",
        "    # Predict on the test set\n",
        "    y_test_pred = clf.predict(X_test_RFE)\n",
        "    test_recall = recall_score(y_test_RFE, y_test_pred)\n",
        "    test_recall_scores.append(test_recall)\n",
        "\n",
        "    print(f\"Ratio: {ratio}, Train Recall: {train_recall}, Test Recall: {test_recall}\")\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DQmCZHXyzlmP",
        "outputId": "c11c22e5-81d4-4aed-e784-ecaee7144ca1"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Without SMOTE, Train Recall: 0.07702739354488744, Test Recall: 0.0833499104833897\n",
            "Ratio: 0.2, Train Recall: 0.12133891213389121, Test Recall: 0.12870499303759697\n",
            "Ratio: 0.25, Train Recall: 0.17337841992007377, Test Recall: 0.18102247861547643\n",
            "Ratio: 0.3, Train Recall: 0.22423362650499531, Test Recall: 0.23035607718321066\n",
            "Ratio: 0.35, Train Recall: 0.2785937347516346, Test Recall: 0.2771036403421524\n",
            "Ratio: 0.4, Train Recall: 0.32473742635129366, Test Recall: 0.32365227770041777\n",
            "Ratio: 0.45, Train Recall: 0.3794948670752766, Test Recall: 0.3743783568728864\n",
            "Ratio: 0.5, Train Recall: 0.4392622320894885, Test Recall: 0.42729261985279493\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Plot the recall scores\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.plot([0] + ratios, train_recall_scores, marker='o', label='Train Recall')\n",
        "plt.plot([0] + ratios, test_recall_scores, marker='o', label='Test Recall')\n",
        "plt.title('Recall Scores for Different SMOTE Ratios (Naive Bayes)')\n",
        "plt.xlabel('SMOTE Ratio')\n",
        "plt.ylabel('Recall Score')\n",
        "plt.xticks([0] + ratios, ['No SMOTE'] + [f'{int(r*100)}:{100-int(r*100)}' for r in ratios])\n",
        "plt.legend()\n",
        "plt.grid(True)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 573
        },
        "id": "A3O2d9Fk5HNl",
        "outputId": "a41f1abb-c402-4d04-a2e6-b4882900689e"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize SMOTE with a random state for reproducibility\n",
        "smote = SMOTE(random_state=42)\n",
        "\n",
        "# Apply SMOTE to the training data to handle class imbalance\n",
        "# This generates synthetic samples for the minority class\n",
        "X_train_RFE, y_train_RFE = smote.fit_resample(X_train_RFE, y_train_RFE)"
      ],
      "metadata": {
        "id": "vW4mE6P4Av-S"
      },
      "execution_count": 23,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize and fit a Gaussian Naive Bayes model using the RFE-selected training data\n",
        "RFE_nb= GaussianNB() # Initialize the Gaussian Naive Bayes model\n",
        "RFE_nb.fit(X_train_RFE, y_train_RFE) # Fit the model to the training data\n",
        "\n",
        "# Initialize and fit a Random Forest classifier using the RFE-selected training data\n",
        "RFE_clf = RandomForestClassifier(random_state=42)# Initialize the Random Forest model with a random state for reproducibility\n",
        "RFE_clf.fit(X_train_RFE, y_train_RFE) # Fit the model to the training data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "KaJI2De-A5xj",
        "outputId": "a6761050-4d25-4f31-b009-3efb0f8f02b2"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict the target values for the training and testing datasets using the fitted Gaussian Naive Bayes model\n",
        "nb_RFE_y_train_pred = RFE_nb.predict(X_train_RFE)\n",
        "nb_RFE_y_test_pred = RFE_nb.predict(X_test_RFE)\n",
        "\n",
        "# Calculate the recall score for the training and testing datasets\n",
        "nb_train_recall = recall_score(y_train_RFE, nb_RFE_y_train_pred)\n",
        "nb_test_recall = recall_score(y_test_RFE, nb_RFE_y_test_pred)"
      ],
      "metadata": {
        "id": "bgu5zSraBQmW"
      },
      "execution_count": 27,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict the target values for the training and testing datasets using the fitted Random Forest model\n",
        "rf_RFE_y_train_pred = RFE_clf.predict(X_train_RFE)\n",
        "rf_RFE_y_test_pred = RFE_clf.predict(X_test_RFE)\n",
        "\n",
        "# Calculate the recall score for the training and testing datasets\n",
        "rf_train_recall = recall_score(y_train_RFE, rf_RFE_y_train_pred)\n",
        "rf_test_recall = recall_score(y_test_RFE, rf_RFE_y_test_pred)"
      ],
      "metadata": {
        "id": "uBd7jDihIP6T"
      },
      "execution_count": 28,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the recall scores for the Naive Bayes model\n",
        "print(f\"Naive Bayes Train Recall: {nb_train_recall}\")\n",
        "print(f\"Naive Bayes Test Recall: {nb_test_recall}\")\n",
        "\n",
        "# Print the recall scores for the Random Forest model\n",
        "print(f\"\\nRandom Forest Train Recall: {rf_train_recall}\")\n",
        "print(f\"Random Forest Test Recall: {rf_test_recall}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8JWLJWgaB1P3",
        "outputId": "7bb57e1a-2148-405d-ada5-6e857b48f111"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Naive Bayes Train Recall: 0.7883631768151582\n",
            "Naive Bayes Test Recall: 0.7710364034215238\n",
            "\n",
            "Random Forest Train Recall: 0.9987447805927709\n",
            "Random Forest Test Recall: 0.9476825144221206\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize SMOTE with a random state for reproducibility\n",
        "smote = SMOTE(random_state=42)\n",
        "\n",
        "# Apply SMOTE to the training data to handle class imbalance\n",
        "# This generates synthetic samples for the minority class\n",
        "X_train_pycaret, y_train_pycaret = smote.fit_resample(X_train_pycaret, y_train_pycaret)"
      ],
      "metadata": {
        "id": "uCB8O4O4GZ9o"
      },
      "execution_count": 30,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Initialize and fit a Gaussian Naive Bayes model using the PyCaret-selected training data\n",
        "pycaret_nb= GaussianNB() # Initialize the Gaussian Naive Bayes model\n",
        "pycaret_nb.fit(X_train_pycaret, y_train_pycaret) # Fit the model to the PyCaret training data\n",
        "\n",
        "# Initialize and fit a Random Forest classifier using the PyCaret-selected training data\n",
        "pycaret_clf = RandomForestClassifier(random_state=42) # Initialize the Random Forest model\n",
        "pycaret_clf.fit(X_train_pycaret, y_train_pycaret) # Fit the model to the PyCaret training data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 75
        },
        "id": "TD1VL2LAGpSB",
        "outputId": "fd46630f-f0f8-4bd2-9570-3d6bd5977472"
      },
      "execution_count": 31,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "RandomForestClassifier(random_state=42)"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=42)</pre></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict the target values for the training and testing datasets using the fitted PyCaret Naive Bayes model\n",
        "pycaret_y_train_pred = pycaret_nb.predict(X_train_pycaret)\n",
        "pycaret_y_test_pred = pycaret_nb.predict(X_test_pycaret)\n",
        "\n",
        "# Calculate the recall score for the training and testing datasets\n",
        "pycaret_train_recall = recall_score(y_train_pycaret, pycaret_y_train_pred)\n",
        "pycaret_test_recall = recall_score(y_test_pycaret, pycaret_y_test_pred)"
      ],
      "metadata": {
        "id": "XzzznTTUGzKv"
      },
      "execution_count": 32,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Predict the target values for the training and testing datasets using the fitted PyCaret Random Forest model\n",
        "rf_pycaret_y_train_pred = pycaret_clf.predict(X_train_pycaret)\n",
        "rf_pycaret_y_test_pred = pycaret_clf.predict(X_test_pycaret)\n",
        "\n",
        "# Calculate the recall score for the training and testing datasets\n",
        "pycaret_rf_train_recall = recall_score(y_train_pycaret, rf_pycaret_y_train_pred)\n",
        "pycaret_rf_test_recall = recall_score(y_test_pycaret, rf_pycaret_y_test_pred)"
      ],
      "metadata": {
        "id": "VextajYeobcw"
      },
      "execution_count": 33,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the recall scores for the PyCaret model\n",
        "print(f\"PyCaret Train Recall: {pycaret_train_recall}\")\n",
        "print(f\"PyCaret Test Recall: {pycaret_test_recall}\")\n",
        "\n",
        "# Print the recall scores for the PyCaret Random Forest model\n",
        "print(f\"\\nPyCaret Random Forest Train Recall: {pycaret_rf_train_recall}\")\n",
        "print(f\"PyCaret Random Forest Test Recall: {pycaret_rf_test_recall}\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "70vV10bzHPBm",
        "outputId": "dcc69a66-67d9-4edf-d6b4-77bfaa790971"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "PyCaret Train Recall: 0.7419883700079412\n",
            "PyCaret Test Recall: 0.7215038790531132\n",
            "\n",
            "PyCaret Random Forest Train Recall: 0.9917428764163913\n",
            "PyCaret Random Forest Test Recall: 0.7443803461308932\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "-m88hn73Jngi"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}
